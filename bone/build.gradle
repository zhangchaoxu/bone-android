apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = "1.0.0"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    resourcePrefix "bone_"

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    dexOptions {
        javaMaxHeapSize "4g" //specify the heap size for the dex process
        preDexLibraries = false //delete the already predexed libraries
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName version

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    // support
    compile deps.appcompat
    compile deps.recyclerview
    compile deps.cardview
    compile deps.design
    compile deps.percent
    // multidex
    compile deps.multidex

    // retrofit
    compile deps.retrofit
    compile deps.adapterrxjava
    compile deps.converterfastjsonandroid
    // okhttp
    compile deps.okhttp
    compile deps.logginginterceptor

    // rxjava https://github.com/ReactiveX/RxJava
    compile deps.rxjava
    compile deps.rxandroid
    compile deps.rxpermissions
    compile deps.rxpreferences

    // permissionsDispatcher
    compile deps.permissionsDispatcher
    apt deps.permissionsDispatcherProcessor

    // db
    compile deps.dbflowcore
    compile deps.dbflow

    // analytics
    compile deps.analytics

    // view
    // ViewBinding
    compile deps.butterknife
    apt deps.butterknifecompiler
    // auto layout
    compile deps.autolayout
    // UltimateRecyclerView
    compile deps.ultimaterecyclerview
    // MaterialEditText
    compile deps.MaterialEditText
    // material dialogs
    compile deps.materialdialogscore
    // PhotoPicker
    compile deps.PhotoPicker
    // PhotoCompress
    compile deps.luban
    // PhotoCrop
    compile deps.ucrop
    // circleimageview
    compile deps.circleimageview
    // TabLayout
    compile deps.FlycoTabLayout
    // glide
    compile deps.glide
    compile deps.glideOkhttp

    // debug
    // stetho
    compile deps.stetho
    compile deps.stethoOkhttp
    compile deps.logger
}

def siteUrl = 'https://github.com/zhangchaoxu/bone-android'
def gitUrl = 'https://github.com/zhangchaoxu/bone-android.git'
// group name do not need match package name
// will be display in the compile path
def artifactId = 'bone'
group = 'com.idogfooding.bone'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name artifactId
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id properties.getProperty("developer.id")
                        name properties.getProperty("developer.name")
                        email properties.getProperty("developer.email")
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
/*task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding = "UTF-8"
        charSet "UTF-8"
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}*/
artifacts {
    //archives javadocJar
    archives sourcesJar
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = artifactId
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
